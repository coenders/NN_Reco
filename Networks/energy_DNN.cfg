*Settings*

{Inputs}

[Branch1]
variables = charge,time
transformations = (x-np.mean(x))/np.std(x),x

[Branch2]
variables = charge
transformations = np.sum(x)

{Outputs}

variables = depositedE
transformations = np.log10(x)

*Model*

{Branch1}

[Convolution3D]
filters = 32
kernel_size = (2,2,6)
[kwargs]
kernel_initializer = he_normal
padding = same
strides = (1,1,3)

[BatchNormalization]

[Activation]
activation = relu

[Dropout]
rate = 0.4

[Convolution3D]
filters = 128
kernel_size = (2,2,6)
[kwargs]
kernel_initializer = he_normal
padding = same
strides = (1,1,2)

[BatchNormalization]

[Activation]
activation = relu

[Dropout]
rate = 0.4

[Convolution3D]
filters = 32
kernel_size = (3,3,3)
[kwargs]
kernel_initializer = he_normal
padding = same
strides = (1,1,1)

[BatchNormalization]

[Activation]
activation = relu

[MaxPooling3D]
[kwargs]
pool_size=(2, 2, 1)

[Flatten]

[Dropout]
rate = 0.5

{Branch2}

[Dense]
units = 1
[kwargs]
kernel_initializer = normal
activation = relu

{model}

[Merge]
[kwargs]
layers = [Branch1, Branch2]

[Dense]
units = 512
[kwargs]
kernel_initializer = normal
activation = relu

[Dropout]
rate = 0.4

[Dense]
units = 128
[kwargs]
kernel_initializer = normal
activation = relu

[Dropout]
rate = 0.4

[Dense]
units = 32
[kwargs]
kernel_initializer = normal
activation = relu

[Dropout]
rate = 0.4

[Dense]
units = 1
[kwargs]
kernel_initializer = normal
activation = linear

